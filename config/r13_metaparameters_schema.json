{
    "$id": "https://www.peratonlabs.com/r9gift.schema.json",
    "title": "PL-GIFT Algorithm Meta-Parameters",
    "technique": "Cosine-linear weight analysis",
    "technique_description": "Computes delta cosine features and classifies with a linear model",
    "technique_changes": "xxxxx",
    "technique_type": [
        "Weight Analysis"
    ],
    "commit_id": "xxxxx",
    "repo_name": "https://github.com/plgift/coslin",
    "$schema": "https://json-schema.org/draft-07/schema",
    "description": "TrojAI schema for the GIFT team, cos-lin method",
    "type": "object",
    "required": [
        "train_$SSD_71$nfeats",
        "train_$SSD_71$ntensors",
        "train_$SSD_71$cls_type",
        "train_$SSD_71$param_batch_sz",
        "train_$SSD_71$C",
        "train_$SSD_71$feature_selection_criterion",
        "train_$SSD_71$features",
        "train_$SSD_71$normalize_for_feature_selection",
        "train_$FasterRCNN_209$nfeats",
        "train_$FasterRCNN_209$ntensors",
        "train_$FasterRCNN_209$cls_type",
        "train_$FasterRCNN_209$param_batch_sz",
        "train_$FasterRCNN_209$C",
        "train_$FasterRCNN_209$feature_selection_criterion",
        "train_$FasterRCNN_209$features",
        "train_$FasterRCNN_209$normalize_for_feature_selection",
        "train_$DetrForObjectDetection_326$nfeats",
        "train_$DetrForObjectDetection_326$ntensors",
        "train_$DetrForObjectDetection_326$cls_type",
        "train_$DetrForObjectDetection_326$param_batch_sz",
        "train_$DetrForObjectDetection_326$C",
        "train_$DetrForObjectDetection_326$feature_selection_criterion",
        "train_$DetrForObjectDetection_326$features",
        "train_$DetrForObjectDetection_326$normalize_for_feature_selection"
    ],
    "additionalProperties": false,
    "properties": {
        "train_$SSD_71$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$SSD_71$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$SSD_71$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$SSD_71$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$SSD_71$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$SSD_71$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$SSD_71$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$SSD_71$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not apply normalization before feature selection"
        },
        "train_$FasterRCNN_209$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$FasterRCNN_209$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$FasterRCNN_209$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$FasterRCNN_209$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$FasterRCNN_209$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$FasterRCNN_209$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$FasterRCNN_209$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$FasterRCNN_209$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not apply normalization before feature selection"
        },
        "train_$DetrForObjectDetection_326$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$DetrForObjectDetection_326$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$DetrForObjectDetection_326$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$DetrForObjectDetection_326$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$DetrForObjectDetection_326$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$DetrForObjectDetection_326$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$DetrForObjectDetection_326$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$DetrForObjectDetection_326$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not apply normalization before feature selection"
        }
    }
}