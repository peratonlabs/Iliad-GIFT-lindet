{
    "$id": "https://www.peratonlabs.com/r9gift.schema.json",
    "title": "PL-GIFT Algorithm Meta-Parameters",
    "technique": "Cosine-linear weight analysis",
    "technique_description": "Computes delta cosine features and classifies with a linear model",
    "technique_changes": "xxxxx",
    "technique_type": [
        "Weight Analysis"
    ],
    "commit_id": "xxxxx",
    "repo_name": "https://github.com/plgift/coslin",
    "$schema": "https://json-schema.org/draft-07/schema",
    "description": "TrojAI schema for the GIFT team, cos-lin method",
    "type": "object",
    "required": [
        "train_$Net3_6$nfeats",
        "train_$Net3_6$ntensors",
        "train_$Net3_6$cls_type",
        "train_$Net3_6$param_batch_sz",
        "train_$Net3_6$C",
        "train_$Net3_6$feature_selection_criterion",
        "train_$Net3_6$features",
        "train_$Net3_6$normalize_for_feature_selection",
        "train_$Net3_6$sort_tensors",
        "train_$Net5_10$nfeats",
        "train_$Net5_10$ntensors",
        "train_$Net5_10$cls_type",
        "train_$Net5_10$param_batch_sz",
        "train_$Net5_10$C",
        "train_$Net5_10$feature_selection_criterion",
        "train_$Net5_10$features",
        "train_$Net5_10$normalize_for_feature_selection",
        "train_$Net5_10$sort_tensors",
        "train_$Net4r_8$nfeats",
        "train_$Net4r_8$ntensors",
        "train_$Net4r_8$cls_type",
        "train_$Net4r_8$param_batch_sz",
        "train_$Net4r_8$C",
        "train_$Net4r_8$feature_selection_criterion",
        "train_$Net4r_8$features",
        "train_$Net4r_8$normalize_for_feature_selection",
        "train_$Net4r_8$sort_tensors",
        "train_$Net5r_10$nfeats",
        "train_$Net5r_10$ntensors",
        "train_$Net5r_10$cls_type",
        "train_$Net5r_10$param_batch_sz",
        "train_$Net5r_10$C",
        "train_$Net5r_10$feature_selection_criterion",
        "train_$Net5r_10$features",
        "train_$Net5r_10$normalize_for_feature_selection",
        "train_$Net5r_10$sort_tensors",
        "train_$Net7r_14$nfeats",
        "train_$Net7r_14$ntensors",
        "train_$Net7r_14$cls_type",
        "train_$Net7r_14$param_batch_sz",
        "train_$Net7r_14$C",
        "train_$Net7r_14$feature_selection_criterion",
        "train_$Net7r_14$features",
        "train_$Net7r_14$normalize_for_feature_selection",
        "train_$Net7r_14$sort_tensors",
        "train_$Net6r_12$nfeats",
        "train_$Net6r_12$ntensors",
        "train_$Net6r_12$cls_type",
        "train_$Net6r_12$param_batch_sz",
        "train_$Net6r_12$C",
        "train_$Net6r_12$feature_selection_criterion",
        "train_$Net6r_12$features",
        "train_$Net6r_12$normalize_for_feature_selection",
        "train_$Net6r_12$sort_tensors",
        "train_$Net2r_4$nfeats",
        "train_$Net2r_4$ntensors",
        "train_$Net2r_4$cls_type",
        "train_$Net2r_4$param_batch_sz",
        "train_$Net2r_4$C",
        "train_$Net2r_4$feature_selection_criterion",
        "train_$Net2r_4$features",
        "train_$Net2r_4$normalize_for_feature_selection",
        "train_$Net2r_4$sort_tensors",
        "train_$Net3r_6$nfeats",
        "train_$Net3r_6$ntensors",
        "train_$Net3r_6$cls_type",
        "train_$Net3r_6$param_batch_sz",
        "train_$Net3r_6$C",
        "train_$Net3r_6$feature_selection_criterion",
        "train_$Net3r_6$features",
        "train_$Net3r_6$normalize_for_feature_selection",
        "train_$Net3r_6$sort_tensors",
        "train_$Net7_14$nfeats",
        "train_$Net7_14$ntensors",
        "train_$Net7_14$cls_type",
        "train_$Net7_14$param_batch_sz",
        "train_$Net7_14$C",
        "train_$Net7_14$feature_selection_criterion",
        "train_$Net7_14$features",
        "train_$Net7_14$normalize_for_feature_selection",
        "train_$Net7_14$sort_tensors",
        "train_$Net2s_4$nfeats",
        "train_$Net2s_4$ntensors",
        "train_$Net2s_4$cls_type",
        "train_$Net2s_4$param_batch_sz",
        "train_$Net2s_4$C",
        "train_$Net2s_4$feature_selection_criterion",
        "train_$Net2s_4$features",
        "train_$Net2s_4$normalize_for_feature_selection",
        "train_$Net2s_4$sort_tensors",
        "train_$Net3s_6$nfeats",
        "train_$Net3s_6$ntensors",
        "train_$Net3s_6$cls_type",
        "train_$Net3s_6$param_batch_sz",
        "train_$Net3s_6$C",
        "train_$Net3s_6$feature_selection_criterion",
        "train_$Net3s_6$features",
        "train_$Net3s_6$normalize_for_feature_selection",
        "train_$Net3s_6$sort_tensors",
        "train_$Net6_12$nfeats",
        "train_$Net6_12$ntensors",
        "train_$Net6_12$cls_type",
        "train_$Net6_12$param_batch_sz",
        "train_$Net6_12$C",
        "train_$Net6_12$feature_selection_criterion",
        "train_$Net6_12$features",
        "train_$Net6_12$normalize_for_feature_selection",
        "train_$Net6_12$sort_tensors",
        "train_$Net2_4$nfeats",
        "train_$Net2_4$ntensors",
        "train_$Net2_4$cls_type",
        "train_$Net2_4$param_batch_sz",
        "train_$Net2_4$C",
        "train_$Net2_4$feature_selection_criterion",
        "train_$Net2_4$features",
        "train_$Net2_4$normalize_for_feature_selection",
        "train_$Net2_4$sort_tensors",
        "train_$Net4_8$nfeats",
        "train_$Net4_8$ntensors",
        "train_$Net4_8$cls_type",
        "train_$Net4_8$param_batch_sz",
        "train_$Net4_8$C",
        "train_$Net4_8$feature_selection_criterion",
        "train_$Net4_8$features",
        "train_$Net4_8$normalize_for_feature_selection",
        "train_$Net4_8$sort_tensors"
    ],
    "additionalProperties": false,
    "properties": {
        "train_$Net3_6$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net3_6$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net3_6$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net3_6$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net3_6$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net3_6$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net3_6$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net3_6$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net3_6$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net5_10$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net5_10$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net5_10$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net5_10$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net5_10$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net5_10$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net5_10$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net5_10$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net5_10$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net4r_8$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net4r_8$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net4r_8$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net4r_8$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net4r_8$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net4r_8$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net4r_8$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net4r_8$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net4r_8$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net5r_10$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net5r_10$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net5r_10$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net5r_10$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net5r_10$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net5r_10$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net5r_10$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net5r_10$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net5r_10$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net7r_14$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net7r_14$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net7r_14$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net7r_14$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net7r_14$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net7r_14$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net7r_14$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net7r_14$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net7r_14$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net6r_12$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net6r_12$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net6r_12$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net6r_12$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net6r_12$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net6r_12$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net6r_12$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net6r_12$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net6r_12$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net2r_4$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net2r_4$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net2r_4$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net2r_4$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net2r_4$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net2r_4$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net2r_4$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net2r_4$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net2r_4$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net3r_6$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net3r_6$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net3r_6$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net3r_6$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net3r_6$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net3r_6$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net3r_6$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net3r_6$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net3r_6$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net7_14$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net7_14$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net7_14$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net7_14$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net7_14$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net7_14$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net7_14$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net7_14$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net7_14$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net2s_4$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net2s_4$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net2s_4$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net2s_4$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net2s_4$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net2s_4$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net2s_4$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net2s_4$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net2s_4$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net3s_6$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net3s_6$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net3s_6$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net3s_6$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net3s_6$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net3s_6$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net3s_6$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net3s_6$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net3s_6$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net6_12$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net6_12$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net6_12$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net6_12$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net6_12$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net6_12$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net6_12$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net6_12$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net6_12$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net2_4$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net2_4$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net2_4$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net2_4$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net2_4$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net2_4$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net2_4$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net2_4$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net2_4$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        },
        "train_$Net4_8$nfeats": {
            "type": "integer",
            "minimum": 1,
            "description": "how many features to select",
            "suggested_minimum": 50,
            "suggested_maximum": 5000
        },
        "train_$Net4_8$ntensors": {
            "type": "integer",
            "minimum": 1,
            "description": "how many tensors select features from",
            "suggested_minimum": 5,
            "suggested_maximum": 100
        },
        "train_$Net4_8$cls_type": {
            "enum": [
                "LogisticRegression"
            ],
            "description": "name of classifier class (only LogisticRegression is currently supported)"
        },
        "train_$Net4_8$param_batch_sz": {
            "type": "integer",
            "minimum": 1,
            "description": "how many torch 'parameters' to look at at a time (trade off memory and disk reading)",
            "suggested_minimum": 80,
            "suggested_maximum": 80
        },
        "train_$Net4_8$C": {
            "type": "number",
            "minimum": 1e-09,
            "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive",
            "suggested_minimum": 0.01,
            "suggested_maximum": 200.0
        },
        "train_$Net4_8$feature_selection_criterion": {
            "enum": [
                "corr",
                "auc"
            ],
            "description": "criterion for greedy feature selection"
        },
        "train_$Net4_8$features": {
            "enum": [
                "raw",
                "white_delta",
                "cosine_delta",
                "pnorm_delta",
                "white",
                "cosine",
                "pnorm"
            ],
            "description": "preprocessing options. Normalize by stdev (white) or L2 (cosine) or None. Use raw or 'delta' from pretrained reference model"
        },
        "train_$Net4_8$normalize_for_feature_selection": {
            "type": "boolean",
            "description": "whether or not to apply normalization before feature selection"
        },
        "train_$Net4_8$sort_tensors": {
            "type": "boolean",
            "description": "whether or not to sort tensors"
        }
    }
}